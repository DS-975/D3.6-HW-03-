python -m venv venv
# Активируем виртуальное окружение
.\venv\Scripts\activate
# Устанавливаем библиотеки из requirements.txt (Django)
pip install -r requirements.txt


django-admin startproject project
cd .\project\
python manage.py startapp simpleapp

project/project/urls.py → 1 | from django.contrib import admin
                          2 | from django.urls import path, include
                          3 |
                          4 | urlpatterns = [
                          5 |    path('admin/', admin.site.urls),
                          6 |    path('pages/', include('django.contrib.flatpages.urls')),  # < вот тут
                          7 | ]

project/simpleapp/models.py → 1 | from django.db import models
                              2 | from django.core.validators import MinValueValidator
                              3 |
                              4 |
                              5 | # Товар для нашей витрины
                              6 | class Product(models.Model):
                              7 |     name = models.CharField(
                              8 |         max_length=50,
                              9 |         unique=True, # названия товаров не должны повторяться
                             10 |     )
                             11 |     description = models.TextField()
                             12 |     quantity = models.IntegerField(
                             13 |         validators=[MinValueValidator(0)],
                             14 |     )
                             15 |     # поле категории будет ссылаться на модель категории
                             16 |     category = models.ForeignKey(
                             17 |         to='Category',
                             18 |         on_delete=models.CASCADE,
                             19 |         related_name='products', # все продукты в категории будут доступны через поле products
                             20 |     )
                             21 |     price = models.FloatField(
                             22 |         validators=[MinValueValidator(0.0)],
                             23 |     )
                             24 |
                             25 |     def __str__(self):
                             26 |         return f'{self.name.title()}: {self.description[:20]}'
                             27 |
                             28 |
                             29 | # Категория, к которой будет привязываться товар
                             30 | class Category(models.Model):
                             31 |     # названия категорий тоже не должны повторяться
                             32 |     name = models.CharField(max_length=100, unique=True)
                             33 |
                             34 |     def __str__(self):
                             35 |         return self.name.title()



project/simpleapp/admin.py → 1 | from django.contrib import admin
                             2 | from .models import Category, Product
                             3 |
                             4 |
                             5 | admin.site.register(Category)
                             6 | admin.site.register(Product)



project/simpleapp/views.py → 1 | # Импортируем класс, который говорит нам о том,
                             2 | # что в этом представлении мы будем выводить список объектов из БД
                             3 | from django.views.generic import ListView
                             4 | from .models import Product
                             5 |
                             6 |
                             7 | class ProductsList(ListView):
                             8 |     # Указываем модель, объекты которой мы будем выводить
                             9 |     model = Product
                            10 |     # Поле, которое будет использоваться для сортировки объектов
                            11 |     ordering = 'name'
                            12 |     # Указываем имя шаблона, в котором будут все инструкции о том,
                            13 |     # как именно пользователю должны быть показаны наши объекты
                            14 |     template_name = 'products.html'
                            15 |     # Это имя списка, в котором будут лежать все объекты.
                            16 |     # Его надо указать, чтобы обратиться к списку объектов в html-шаблоне.
                            17 |     context_object_name = 'products'

project/project/simpleapp → New → File → urls.py

project/project/simpleapp/urls.py → 1 | from django.urls import path
                                    2 | # Импортируем созданное нами представление
                                    3 | from .views import ProductsList
                                    4 |
                                    5 |
                                    6 | urlpatterns = [
                                    7 |    # path — означает путь.
                                    8 |    # В данном случае путь ко всем товарам у нас останется пустым,
                                    9 |    # чуть позже станет ясно почему.
                                   10 |    # Т.к. наше объявленное представление является классом,
                                   11 |    # а Django ожидает функцию, нам надо представить этот класс в виде view.
                                   12 |    # Для этого вызываем метод as_view.
                                   13 |    path('', ProductsList.as_view()),
                                   14 | ]


project/project/urls.py → 1 | from django.contrib import admin
                          2 | from django.urls import path, include
                          3 |
                          4 | urlpatterns = [
                          5 |    path('admin/', admin.site.urls),
                          6 |    path('pages/', include('django.contrib.flatpages.urls')),
                          7 |    # Делаем так, чтобы все адреса из нашего приложения (simpleapp/urls.py)
                          8 |    # подключались к главному приложению с префиксом products/.
                          9 |    path('products/', include('simpleapp.urls')),
                          10 | ]

# настройки в settings.py
project/project/settings.py → 12 | import os
                              40 | 'simpleapp',
                              58 | 'DIRS': [os.path.join(BASE_DIR, 'simpleapp/templates/simpleapp'),],



project/simpleapp → New → File → templates/simpleapp/index.html


# cоздать файлы миграций, с помощью - makemigrations
python manage.py makemigrations

# применяем миграций, с помощью - migrate
python manage.py migrate







prj/djangopri/models.py → 1 | from django.db import models
                          2 |
                          3 | class Category(models.Model):
                          4 |    name = models.CharField(max_length=30, unique=True)
                          5 |    description = models.TextField() # description - описание

prj/djangopri/views.py → 1 | from django.shortcuts import render
                         2 |
                         3 |
                         4 | def index(reduest):
                         5 |     return render(reduest, 'index.html')

# Проверяем модели на изменение, с помощью - makemigrations
python manage.py makemigrations

# Вносим изменения, с помощью - migrate
python manage.py migrate

prj/djangopri/admin.py → 1 | from django.contrib import admin
                         2 | from djangopri.models import Category
                         3 |
                         4 | admin.site.register(Category)

# Проверяем модели на изменение, с помощью - makemigrations
python manage.py makemigrations

# Вносим изменения, с помощью - migrate
python manage.py migrate

# Запускаем сервер, с помощью
python manage.py runserver

# Создадим superuser, admin | admin
python manage.py createsuperuser

# Запускаем сервер, с помощью
python manage.py runserver

# Добавляем чистаемость моделей
prj/djangopri/models.py → 7 |     # Функция "__str__"
                          8 |     def __str__(self):
                          9 |         return self.name

# Запускаем сервер, с помощью
python manage.py runserver

prj/djangopri/models.py → 11 |    # Переписываем Categorys
                          12 |    class Meta:
                          13 |        verbose_name = 'Категория'
                          14 |        verbose_name_plural = 'Категории'


prj/djangopri/models.py → 4 |     name = models.CharField(max_length=30, unique=True, verbose_name='Название')
                          5 |     description = models.TextField(null=True, blank=True, verbose_name='Описание')
                          6                              # description - описание |
                          7                              # editable - это возможно изменение в админ панели
                          8                              # help_text - выводиться в админке текст добавочного описания
                          9                              # null позволяет сохранить значения нан |
                          10                              # blank позволяет не заполнять значение |
                          11                              # verbose_name |
                          12
                          13 | # Функция "__str__"
                          14 |     def __str__(self):
                          15 |         return self.name
                          16 |
                          17 |     # Переписываем Categorys
                          18 |     class Meta:
                          19 |         verbose_name = 'Категория'
                          20 |         verbose_name_plural = 'Категории'
                          21 |
                          22 | class Good(models.Model):
                          23 |     name = models.CharField(max_length=30, verbose_name='Название')
                          24 |     price = models.PositiveSmallIntegerField(verbose_name='Цена')
                          25 |     category = models.ForeignKey(Category, null=True, blank=True, on_delete=models.SET_NULL) # Делаем связь (models.ForeignKey),
                          26 |                                     # обезательное поле - on_delete - что должно происходить в случае удаления
                          27 |
                          28 |     # Функция "__str__"
                          29 |     def __str__(self):
                          30 |         return self.name
                          31 |
                          32 |     # Переписываем Good
                          33 |     class Meta:
                          34 |         verbose_name = 'Товар'
                          35 |         verbose_name_plural = 'Товары'
# Добавим Category, Good в admin.py
prj/djangopri/admin.py → 1 | from django.contrib import admin
                         2 | from djangopri.models import Category, Good # ← Category, Good
                         3 |
                         4 | admin.site.register(Category) # ← Category, Good
                         5 | admin.site.register(Good) # ← Good

prj/djangopri/models.py → 32 |     # Переписываем Good
                          33 |     class Meta:
                          34 |         verbose_name = 'Товар'
                          35 |         verbose_name_plural = 'Товары'
                          36 |         ordering = ['-price'] # ordering - будет соритровать,
                          37 |                               # то есть у нас сразу в админке будет сортировать,
                          38 |                               # -price от меньшему к большему
                          39 |
                          40 | class Course(models.Model):
                          41 |     name = models.CharField(max_length=30)
                          42 |
                          43 | class Student(models.Model):
                          44 |     name = models.CharField(max_length=15)
                          45 |     course = models.ManyToManyField(Course) # связь - ManyToManyField - c Course

# Добавим Course, Student  в admin.py
prj/djangopri/admin.py → 1 | from django.contrib import admin
                         2 | from djangopri.models import Category, Good, Category, Good # ← Course, Student
                         3 |
                         4 | admin.site.register(Category)
                         5 | admin.site.register(Good)
                         6 | admin.site.register(Course) # ← Course
                         7 | admin.site.register(Student) # ← Student

# К "Товарам" можнет присоединять множество разных категорий

# Чтоюбы можно было и к "Категориям" присоединять множество разных "Товаров",
#                   и к "Товарам"  присоединять множество разных "Категорий"

# Проверяем модели на изменение, с помощью - makemigrations
python manage.py makemigrations

# Вносим изменения, с помощью - migrate
python manage.py migrate

# Запускаем сервер, с помощью
python manage.py runserver

prj/djangopri/views.py → 1 | from django.shortcuts import render
                         2 | from djangopri.models import Good
                         3 |
                         4 |
                         5 | def index(request):
                         6 |     goods = Good.objects.all()
                         7 |     return render(request, 'index.html', context={'goods':goods}) # <- 'goods' в index.html


# {{ }} - через них мы обращяемся к перерменной
# {% %} - через них мы обращяемся к циклам, условиям б какие - то блоки
# Допустим как описывается бло for - <body>{% for x in goods %}</body>  |  goods из prj/djangopri/views.py
# Мы сейчас пробезимся по тавару goods
prj/djangopri/templates/djangopri/index.html → 1 | <html>
                                               2 |
                                               3 | <head></head>
                                               4 | <body>{% for x in goods %}
                                               5 | {{ x }}
                                               6 | {% endfor %}<!--  Закрываем блок for-->
                                               7 | </body>

</html>

# Проверяем модели на изменение, с помощью - makemigrations
python manage.py makemigrations

# Вносим изменения, с помощью - migrate
python manage.py migrate

# Запускаем сервер, с помощью
python manage.py runserver

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# Пример как работает условие в Django
# Он пробегаеться по всем элементам goods если у нас этот элемент Kio Rio 3 совпадает с name то он его выводит

prj/djangopri/views.py → 1 | from django.shortcuts import render
                         2 | from djangopri.models import Good
                         3 |
                         4 |
                         5 | def index(request):
                         6 |     goods = Good.objects.all()
                         7 |     return render(request, 'index.html', context={'goods':goods, 'name': 'Kio Rio 3'}) # <- 'name': 'Kio Rio 3'

prj/djangopri/templates/djangopri/index.html → 1 | <html>
                                               2 |
                                               3 | <head></head>
                                               4 | <body>
                                               5 |     <div>
                                               6 |         {% for i in goods %}
                                               7 |         {% if name in i.name %}
                                               8 |             <h1>{{ name }}</h1>
                                               9 |         {% endif %}
                                              10 |         {% endfor %}
                                              11 |     </div>
                                              12 | </body>
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


# Так же  по мимо условие у нас есть elif

<!-- Допустим мы хотим, чтобы блоко повторялся на других страницах -->
<!--    <dev>-->
<!--        {% block name %}-->
<!--        -->
<!--        {% endblock name %}-->
<!--    </dev>-->

<!--    <div>-->
<!--        {% if name|length > 1 %}-->
<!--            <h1>{{ name }}</h1>-->
<!--        -->
<!--        {% elif %}-->
<!--        -->
<!--        {% else %} -->
<!--        -->
<!--        {% endif %}-->
<!--    </div>-->




<!--    <div>-->
<!--        {% for i in goods %}-->
<!--        {% if name in i.name %}-->
<!--            <h1>{{ name }}</h1>-->
<!--        {% endif %}-->
<!--        {% endfor %}-->
<!--    </div>-->



<!--    <div>{% for x in goods %}-->
<!--        <h1>{{ x }}</h1><br>-->
<!--    </div>{% endfor %}-->
<!--  Закрываем блок for-->


# Чтобы добавить новую страничку её нужно создать в HTML (prj/djangopri/templates/djangopri/HTML.html)  и
